


C Library Functions                                     Printf(3)



NNAAMMEE
     Printf - common base of formatted output toolkit

SSYYNNOOPPSSIISS
     CONST
        Pabort = 201;   Labort     = 205;
        Fabort = 202;   WabortP    = 206;
        Sabort = 203;   WabortA    = 207;
        Eabort = 204;   PanicAbort = 255;

     CONST
        TellSyntax  = 1;  TellOutput  = 2;
        AbortSyntax = 3;  AbortOutput = 4;
        Default     = {TellSyntax .. TellOutput};

     TYPE
        FmtExitCode = (Success, Undefined, FmtPanic,
           IllegalWidth, TooFewFormElems, TooManyFormElems,
           IllegalConvChar, MinHat0Comb, BslashAnd0,
           BadOctalChar, AllocFailed, StringTooSmall,
           CannotWriteFile, CannotWriteStderr,
           CannotWriteStdout, IllegalWindowOffset,
           WindowTooSmall, CannotFlushWindow,
           CannotAccessWindow, CannotWriteWindow);
        FmtExitSet  = SET OF FmtExitCode;

     CONST
        SynError = FmtExitSet {IllegalWidth .. BadOctalChar};
        OutError = FmtExitSet {AllocFailed .. CannotWriteWindow};

     PROCEDURE Printf (output : Long; no : CARDINAL; VAR fmt :
        ARRAY OF CHAR; VAR i1 ,i2, i3, i4, i5, i6, i7,i8 :
        ARRAY OF BYTE) : FmtExitCode;


DDEESSCCRRIIPPTTIIOONN
     This  module  is  the common base of _P_(_3_), _F_(_3_), _S_(_3_), _E_(_3_),
     _L_(_3_) and _W_(_3_) which  realize  formatted  output  to  various
     devices.   It  is  not  intended to be used directly but the
     declarations exported from here are common  to  all  of  the
     mentioned  modules.  Furthermore the description of _P_r_i_n_t_f's
     formatting capabilities applies to all  output  routines  of
     this toolkit.

     _P_r_i_n_t_f  reads  the  format  string  _f_m_t _.  Any character not
     belonging to a escape sequence introduced by \\ or  a  format
     element  introduced  by %% is simply appended to _o_u_t_p_u_t (type
     _L_o_n_g imported from _L_o_n_g_S_t_r_i_n_g_s_(_3_)).   Escape  sequences  are
     substituted  by a single character while format elements are
     instantiated by the first _n_o parameter of (_n_o may be  zero).





Release 3.0b6Last change: Last change: 25 February 1997          1






C Library Functions                                     Printf(3)



     _P_r_i_n_t_f returns SSuucccceessss on successful completion, a value out
     of _S_y_n_E_r_r_o_r in case of  illegal  format  specifications  and
     AAllllooccFFaaiilleedd if output cannot be appended to _o_u_t_p_u_t.

     The  parameters of _P_r_i_n_t_f are declared as VVAARR parameters for
     reasons of efficiency only.  _P_r_i_n_t_f will never updated them.
     Please  note that this does not affect in any way the possi­
     bility to output expressions using the superior modules _P, _F
     etc.

FFOORRMMAATT EELLEEMMEENNTTSS
     Format  elements do not contain any space character and ful­
     fill the following syntax (_n_u_m_b_e_r is an unsigned sequence of
     digits, _a_n_y stands for any single character):

     _f_o_r_m_a_t_e_l_e_m_e_n_t
          : %% [_a_l_i_g_n] [_w_i_d_t_h] [ ..  _s_c_a_l_e] _c_o_n_v_c_h_a_r

     _a_l_i_g_n
          : [++] [ 00 | [----|^^] [\\ _a_n_y] ]

     _w_i_d_t_h
          : _n_u_m_b_e_r | **

     _s_c_a_l_e
          : _n_u_m_b_e_r | **

     _c_o_n_v_c_h_a_r
          : bb | cc | dd | ee | ff | jj | ll | oo | ss | uu | xx | yy
          | BB | CC | DD | EE | FF | JJ | LL | OO | SS | UU | XX | YY

     Each  format  element  defines  a field in the output stream
     that is by default as wide as necessary to insert the result
     of  a parameter conversion.  The field width can be expanded
     by specifying _w_i_d_t_h.  If not given as an explicit _n_u_m_b_e_r but
     as  ** _P_r_i_n_t_f uses the value of the next yet unused parameter
     (interpreted as a CCAARRDDIINNAALL)  as  width  indication.   Larger
     values  than  2048 will cause _P_r_i_n_t_f to return with IIlllleeggaall­­
     WWiiddtthh, values less  or  equal  than  the  defaults  have  no
     effect.  In all other cases the output field is filled up by
     leading blanks.  Fillup character and alignment strategy may
     be altered by means of _a_l_i_g_n:

     ++    Any  numeric output will be signed (by default positive
          values do not get a ++sign).

     ----   The output will be left aligned within its field.  This
          option has no effect if _w_i_d_t_h is omitted.

     00    The  output of numeric values is filled up with leading
          zeroes (00).  This option implies ----..




Release 3.0b6Last change: Last change: 25 February 1997          2






C Library Functions                                     Printf(3)



     ^^    The fill up characters are inserted before the  leading
          sign and the first digit of a number.

     \\ _a_n_y
          defines _a_n_y to become the fill up character

     _P_r_i_n_t_f will return with MMiinnHHaatt00CCoommbb or BBssllaasshhAAnndd00 on illegal
     combinations of these options (refer to  syntax  description
     above).   00 and ^^ have no effect, if the output value is not
     a number.

     On output of real values, _s_c_a_l_e fixes the number  of  digits
     following  the  decimal  point.  Other numeric output is not
     affected while strings are cut to the length given by  _s_c_a_l_e
     before there are aligned within their output fields.  _P_r_i_n_t_f
     will use the next yet unused parameter as _s_c_a_l_e  indication,
     if ** is specified.

     Since _P_r_i_n_t_f has no idea about the actual types of the argu­
     ments corresponding to its formal  parameters,  _c_o_n_v_c_h_a_r  is
     used  to  determine  the  conversions to be executed for the
     next yet unused parameter of  _P_r_i_n_t_f  will  not  accept  any
     other  conversion  character than those listed and described
     below (error return value: IIlllleeggaallCCoonnvvCChhaarr).  In detail  the
     specifications of _c_o_n_v_c_h_a_r have the following effect:

     uu    decimal output of a CCAARRDDIINNAALL

     xx    hexadecimal output of a CCAARRDDIINNAALL

     oo    octal output of a CCAARRDDIINNAALL

     dd    decimal output of an IINNTTEEGGEERR

     ff    output of a RREEAALL in floating point notation

     ee    output of a RREEAALL in its normalized exponential form

     cc    output of a single CCHHAARR

     ss    output  of  an  AARRRRAAYY OOFF CCHHAARR until the first null byte
          (0C) or the high bound of the array is reached

     bb    output of a BBOOOOLLEEAANN as text TTRRUUEE or FFAALLSSEE

     yy    output of a BBOOOOLLEEAANN as text yyeess or nnoo

     jj    output of a BBOOOOLLEEAANN as text jjaa or nneeiinn

     ll    output of a CCHHAARR _w_i_d_t_h times (i.e.  use  the  character
          given  as  parameter  to  draw a line of length _w_i_d_t_h).
          Without explicit _w_i_d_t_h indication same as cc.



Release 3.0b6Last change: Last change: 25 February 1997          3






C Library Functions                                     Printf(3)



     If _c_o_n_v_c_h_a_r is an  upper  case  letter,  _P_r_i_n_t_f  treats  the
     parameter  associated to the currently processed format ele­
     ment as the address (SSYYSSTTEEMM..AADDDDRREESSSS) of an  variable  to  be
     output  (respectively  as a PPOOIINNTTEERR TTOO the type expected for
     the corresponding lower case letters).  If using  SS,  ensure
     that  that  null  byte  is found at the end of the string or
     limit output size by specifying _s_c_a_l_e.

     Note that uu, oo, xx, and dd are legal conversion characters  to
     output  any  type  which has the same size (in bytes) as the
     expected one.  This feature can be used to output an enumer­
     ation  value  (i.e  its ordinal number) or an address (equal
     size presumed).  Furthermore these conversion characters may
     be  used  to output the ascii-value of a CCHHAARR.  Vice versa cc
     may be used to output a character that  is  specified  by  a
     small  CCAARRDDIINNAALL-  or  IINNTTEEGGEERR-value.  You should avoid other
     combinations than those mentioned,  the  results  are  unde­
     fined.

     If  the number of format elements within _f_m_t plus the number
     of variable scale of width indications (**) is not  equal  to
     _n_o,  _P_r_i_n_t_f  will  return  with  an error (TTooooMMaannyyFFoorrmmEElleemmss,
     TTooooFFeewwFFoorrmmEElleemmss).  Using the high level  routines  of  _P_(_3_),
     _F_(_3_), _S_(_3_), _E_(_3_), _W_(_3_), and _L_(_3_) the expected number of for­
     mat elements (including additional parameter used for  scale
     or width indication) derives from the procedure name respec­
     tively from the number  of  formal  parameters  declared  as
     AARRRRAAYY OOFF BBYYTTEE.

     %%%%  will  not  be  interpreted as a format element. A single
     percent character is output instead.

EESSCCAAPPEE SSEEQQUUEENNCCEESS
     Any appearance of the following escape sequences  in  format
     string _f_m_t is substituted as listed:

     \\nn   newline (line feed) (12C)

     \\rr   carriage return (15C)

     \\tt   horizontal tab (11C)

     \\ee   escape (33C)

     \\ff   form feed (14C)

     \\bb   backspace (10C)

     \\&&   bell (7C)

     \\QQ   double quote (")




Release 3.0b6Last change: Last change: 25 February 1997          4






C Library Functions                                     Printf(3)



     \\qq   quote(')

     \\%%   percent (%)

     \\\\   backslash (\)

     \\[00-77]+CC
          character  specified  by  [00-77]+CC  _P_r_i_n_t_f  will  return
          BBaaddOOccttaallCChhaarr on illegal character specifications.

     \\ _o_t_h_e_r
          _o_t_h_e_r (where _o_t_h_e_r is a character not listed above)

EEXXAAMMPPLLEESS
     The formatting capabilities of  _P_r_i_n_t_f  are  illustrated  by
     means of module _P_(_3_).  All examples apply accordingly to the
     other modules of this toolkit.  The 'input' is left aligned,
     output   has   been   indented   8   spaces.   P.rintf1(std­
     out,"Hello.\n%6l\n",'-');
             Hello.
      ------

     pi := 4.0 * arctan(1.0);
     scale := 3;
     P.rintf2(,"100*pi = %f or %e \n",100.0*pi,100.0*pi);
     P.rintf1(,"pi (scale=1): %.1e!\n",pi);
     P.rintf1(,"pi (scale=1): %.1e!\n",pi);
     P.rintf1(,"pi (scale=2): %10.2e!\n",pi);
     P.rintf3(,"pi (scale=%u): %.*f!\n",scale,scale,pi);
     P.rintf4(,"pi                                    (scale=%u):
     %+-*.*f!\n",15,scale+1,scale+1,pi);

             100*pi = 314.1592653589793 or 3.141592653589793e+02
             pi (scale=1): 3.1e+00!
             pi (scale=1): 3.1e+00!
             pi (scale=2):   3.14e+00!
             pi (scale=3): 3.142!
             pi (scale=4): +3.1416        !

     string := "Hello world.";
     P.rintf1("|%s|\n",string);
     P.rintf1("|%20s|\n",string);
     P.rintf1("|%-20s|\n",string);
     P.rintf1("|%20.8s|\n",string);
     P.rintf1("|%-20.8s|\n",string);
     P.rintf1("|%5.3S|\n",ADR(string[3]));

             |Hello world.|
             |        Hello world.|
             |Hello world.        |
             |            Hello wo|
             |Hello wo            |



Release 3.0b6Last change: Last change: 25 February 1997          5






C Library Functions                                     Printf(3)



             |  lo |

     P.rintf4("%10u\n%10u\n%10u\n%10u\n",1,12,223,43333);

                      1
                     12
                    223
                  43333

     P.rintf3("1. %+05d\n2. %+05d\n3. %+04d\n",234,-233,1000);

             1. +0234
             2. -0233
             3. +1000

     val1 := 1; val2 := -20; val3 := 300;
     P.rintf5 ("%+^\.7d\n%+^\.7d\n%+^\.7d\n%7l\n%+^\.7d\n",
       val1,val2,val3,'=',val1+val2+val3);

             +.....1
             -....20
             +...300
             =======
             +...281

     ch := ' ';
     P.rintf4(,"char: Q%cQ -- octal: %o -- hex: %x -- dec: %u\n",
        ch,ch,ch,ch);

             char: " " -- octal: 40  -- hex: 20  -- dec: 32

DDIIAAGGNNOOSSTTIICCSS
     As already mentioned any illegal specification of the format
     string  will  cause  _P_r_i_n_t_f  to  return  immediately with an
     result # _S_u_c_c_e_s_s.  The toolkit in general provides automatic
     error recognition and output success control due to the fol­
     lowing conventions.

     Errors on formatted output are divided into  _S_y_n_E_r_r_o_r  which
     result from illegal format specifications and _O_u_t_E_r_r_o_r which
     result from illegal parameters or problems on writing to the
     various  devices.   Any error will be treated accordingly to
     the bits set in the  current  error  handling  mode  of  the
     affected module:

     _T_e_l_l_S_y_n_t_a_x
          any  _S_y_n_E_r_r_o_r  (in a format string) will be reported to
          _S_t_d_I_O._s_t_d_e_r_r.

     _A_b_o_r_t_S_y_n_t_a_x
          any _S_y_n_E_r_r_o_r will cause  a  program  termination.   The
          relevant  exit  code is given by the constants declared



Release 3.0b6Last change: Last change: 25 February 1997          6






C Library Functions                                     Printf(3)



          in module _P_r_i_n_t_f (_P_(_3_) will  terminate  with  _P_a_b_o_r_t  _,
          _F_(_3_) with _F_a_b_o_r_t etc).

     _T_e_l_l_O_u_t_p_u_t
          any _O_u_t_E_r_r_o_r will be reported to _S_t_d_I_O_._s_t_d_e_r_r.

     _A_b_o_r_t_O_u_t_p_u_t
          any  _O_u_t_E_r_r_o_r will terminate the program (exit codes as
          above).

     By default, any error will be reported and cause  a  process
     termination.   Thus,  success  of  output routines has to be
     controlled only if an other error handling mode than _D_e_f_a_u_l_t
     has been explicitly assigned to the modules.

SSEEEE AALLSSOO
     _m_2_c_(_1_),   _m_r_c_(_1_),   _P_(_3_),  _F_(_3_),  _E_(_3_),  _S_(_3_),  _W_(_3_),  _L_(_3_),
     _L_o_n_g_S_t_r_i_n_g_s_(_3_), _S_t_d_I_O_(_3_)

BBUUGGSS
     Due to implementation restriction of _m_r_c_(_1_) the output  rou­
     tines  of  _P_(_3_),  _F_(_3_),  _S_(_3_),  _E_(_3_), _W_(_3_), and _L_(_3_) are not
     available for other arguments than simple variables (expres­
     sions are rejected with error code 214).

     A  quoted  character as an argument to an AARRRRAAYY OOFF BBYYTTEE will
     be interpreted as a string of length one.  Therefore ss  (_n_o_t
     cc) is the suitable conversion character.

     Strange effects will always occur if the parameter types are
     not suitable for the conversion characters.  Using %%ff or  %%ee
     improperly may even result in a floating point exception.

AAUUTTHHOORR
     Werner Stanglow




















Release 3.0b6Last change: Last change: 25 February 1997          7



