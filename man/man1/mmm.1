.\" ---------------------------------------------------------------------------
.\" Ulm's Modula-2 Compiler and Library Documentation
.\" Copyright (C) 1983-1996 by University of Ulm, SAI, 89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.TH MMM 1 "local:Borchert"
.SH NAME
mmm \- make makefile for Modula-2
.SH SYNOPSIS
.B mmm
.RB [ \(miaelLmPtT ]
[\fB\(miv\fP(\fB\(mi\fP|\fBr\fP|\fBs\fP)]
[\fB\(mi\fP(\fBc\fP|\fBC\fP|\fBu\fP)
makefile]
[\fB\(mip\fP proto]
[file...]
.SH DESCRIPTION
.I Mmm
is a general tool for extracting dependency information from
Modula-2 and Modula/R source files.
On default
.I mmm
generates output in a form acceptable by \fImake(1)\fP
onto standard output.
.PP
If
.B \-c
is given, a makefile is created which
can be updated later using
.BR \-u .
Makefiles created by
.B \-c
contain several sections delimited by comments.
Every section which is to be updated by
.I mmm
is preceded by a comment with a keyword enclosed in braces.
Macro definitions generated by
.I mmm
(except those defined in the \fI{macros}\fP section)
may be redefined without losing their value on updates.
If
.B \-e
is given
environment variables supercede any macro value defaults of
.I mmm
on makefile creation.
Flags given by makefile creation or updating are
remembered by a special comment inside the makefile
and work as defaults
for further
.I mmm
invocations.
By default
.I mmm
works on the source files given in the command line.
They may be omitted on makefile updating if
a \fBSRC\fP macro definition is found.
.PP
On makefile creation a prototype is taken
(except
.B \-C
is given instead of
.BR \-c ).
.I Mmm
tries to take \fI$HOME/.mmm_proto\fP first,
then \fI@LIBDIR@/mmm_proto\fP.
These defaults may be overrided by giving another prototype file
using the \fB-p\fP option.
A typical prototype consists of the wanted section headings
and some additional rules like cleanup and source file printing.
.PP
For each main module the transitive closure of dependencies
is calculated and printed in the list of modules to be linked to.
The main module names determine the output filenames of \fIld(1)\fP.
.PP
Following flags are available:
.TP 8
.B \-a
This flag is necessary if symbol files are to be archived in \fISYM\fP.
If you decide to archive symbol files you must create \fISYM\fP first.
This is best done by \fIar q SYM\fP.
.TP
.SM
.B \-l
Generate rules for maintaining non-main-objects in a library.
The filename of the library may be given in the environment parameter
\fILIB\fP (if
.B \-e
is given)
or may be modified in the macro definition.
.TP
.SM
.B \-L
Generate dependencies even to not explicitely given modules.
For doing this the complete \fBMODPATH\fP (see \fIm2c(1)\fP)
and the library (\fBMODLIB\fP or \fI@LIBDIR@\fP) are considered.
On this flag
.I mmm
warns about every module not found.
.TP
.SM
.B \-m
implies
.B \-l
and causes
.I mmm
to generate rules for supporting a library with profiled objects
of non-main modules.
See \fIm2c(1)\fP
for more information about profiled libraries.
.TP
.SM
.B \-P
Report about calling reference cycles
(e.g. module \fIa\fP imports \fIb\fP and module \fIb\fP imports \fIa\fP).
The main problem of reference cycles is the undefined order of
initialization;
so every reference cycle member must not use anything of the other
members during initialization.
.TP
.SM
.B \-t
Print given source files in topsorted order.
Following command causes correct order of compilation:
.TS
l c l.
m2c `mmm -t *.d *.m2`	or	mrc `mmm -t *.d* *.m[r2]`
.TE
.TP
.SM
.B \-T
Print imports in a form suitable for \fItsort(1)\fP:
.br
\fIfile1 file2\fP
.br
means \fIfile2\fP imports from \fIfile1\fP.
Unlike to the dependency section in makefiles the source file names
are printed.
So
.B \-T
is very similar to
.BR \-t :
.TS
l l.
	m2c `mmm -t *.d *.m2`
is equivalent to	m2c `mmm -T *.d *.m2 | tsort`
and equivalent to	m2c `mmm -T *.d *.m2 | cut -d' ' -f1 | uniq`
.TE
.TP
.SM
.B \-v
Support one of the version managers (\fBs\fP for \fISCCS\fP or
\fBr\fP for \fIrcs\fP).
The use of any version manager can be switched off by giving \fB\(mi\fP.
Because version archive names are derived from the original
file names by adding some prefix or suffix,
problems may occur with long file or module names.
.I Mmm
warns if any of these problems could arise.
.SH "SEE ALSO"
\fIm2c(1)\fP, \fImdb(1)\fP, \fImake(1)\fP
.SH FILES
.Tb '@LIBDIR@/mmm_proto'
.Tp @LIBDIR@/mmm_proto
default prototype
.Tp $HOME/.mmm_proto
own prototype file
.Te
.SH BUGS
Various difficulties
(e.g. \fIm2c(1)\fP does not find symbol files)
occur if
the first 11 characters of a module name
are not identical to the corresponding file name.
.PP
On
.BR -L ,
.I mmm
generates dependencies to symbolfiles in libraries only.
So, implementation module updating in libraries
don't causes
.I make(1)
to link again.
That's because
.I mmm
doesn't know about inter-library dependencies.
.PP
.IR Make (1)
has several bugs and shortcomings (due to design errors)
in context with archives and version managers.
To get around them
.I mmm
is forced in some cases to avoid rules and to generate
transformations explicitely.
Also, sometimes the order of files depending on
is not lexicographic but topologic.
.\" ---------------------------------------------------------------------------
.\" $Id: mmm.1,v 1.2 1997/02/24 18:06:09 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: mmm.1,v $
.\" Revision 1.2  1997/02/24  18:06:09  borchert
.\" - @LIBDIR@ introduced
.\" - .ta replaced by .Tb ... .Te
.\"
.\" Revision 1.1  1996/12/04  18:18:01  martin
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
