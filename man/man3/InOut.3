.\" ---------------------------------------------------------------------------
.\" Ulm's Modula-2 Compiler and Library Documentation
.\" Copyright (C) 1983-1999 by University of Ulm, SAI, 89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.TH InOut 3 "local:Borchert"
.SH NAME
InOut \- formatted input and output to stdin and stdout
.SH SYNOPSIS
.Pg
CONST EOL = 12C;
.sp 0.7
VAR Done: BOOLEAN;
VAR termCH: CHAR;
.sp 0.7
PROCEDURE Read(VAR ch: CHAR);
PROCEDURE ReadString(VAR s: ARRAY OF CHAR);
PROCEDURE ReadCard(VAR c: CARDINAL);
PROCEDURE ReadInt(VAR i: INTEGER);
.sp 0.7
PROCEDURE Write(ch: CHAR);
PROCEDURE WriteLn;
PROCEDURE WriteString(s: ARRAY OF CHAR);
PROCEDURE WriteInt(x: INTEGER; n: CARDINAL);
PROCEDURE WriteCard(x: CARDINAL; n: CARDINAL);
PROCEDURE WriteOct(x: CARDINAL; n: CARDINAL);
PROCEDURE WriteHex(x: CARDINAL; n: CARDINAL);
.Pe
.SH DESCRIPTION
.I InOut
bases on the
.I Terminal(3)
module and writes to
.I StdIO.stdout
and reads from
.IR StdIO.stdin .
.PP
.I Read
reads a character and stores it in
.IR ch .
.PP
.I ReadString
reads a sequence of characters not containing blanks nor
control characters.
Leading blanks and tabs are ignored.
The terminating character is assigned to
.IR termCH .
When
.I str
is filled up to its limit during reading,
.I ReadString
returns after reading one additional character that
is assigned to
.IR termCH .
.PP
.I ReadCard
and
.I ReadInt
read a string and convert it to
cardinal or integer, respectively.
Leading blanks are ignored.
The terminating character is assigned to
.IR termCH .
.PP
.I Write
writes
.I ch
to
.IR stdout .
.PP
.I WriteLn
is equivalent to
\fIWrite\fP(\fIEOL\fP).
.PP
.I WriteString
writes
.I s
to
.IR stdout .
.PP
.I WriteInt
and
.I WriteCard
write an integer or cardinal, respectively,
.I x
with at least
.I n
characters on
.IR stdout .
If
.I n
is greater than the number of digits needed,
blanks are added preceding the number.
.PP
.I WriteOct
and
.I WriteHex
write a cardinal number in
octal/hexadecimal format.
.SH EXAMPLE
Reading of two integer values from standard input:
.Pg
WriteString("i = "); ReadInt(i);
WriteString("j = "); ReadInt(j);
.Pe
.SH DIAGNOSTICS
.I Done
is
.B TRUE
on successful calls,
otherwise
.BR FALSE .
Note that some reading procedures return well defined values even
in case of errors: \fIRead\fP returns \fB0C\fP and \fIReadString\fP
returns the characters read so far.
.SH "SEE ALSO"
\fIFtdIO(3)\fP,
\fIStdIO(3)\fP,
\fITerminal(3)\fP
.SH HISTORY
A similar module was written by Niklaus Wirth for the Lilith system.
The operations \fIOpenInput\fP, \fIOpenOutput\fP, \fICloseInput\fP, and
\fICloseOutput\fP have been omitted. \fIStdIO(3)\fP
and \fIFtdIO(3)\fP should be used instead.
.PP
Note that the semantics of the remaining operations is slightly different
from the Lilith implementation due to the line-oriented input mode
under UNIX.
On Lilith, the example above has to be extended with
explicit invocations of \fIWriteLn\fP because line terminators
were neither to be typed (every other non-digit would
work as well) nor echoed:
.Pg
WriteString("i = "); ReadInt(i); WriteLn;
WriteString("j = "); ReadInt(j); WriteLn;
.Pe
.PP
The current implementation is due to Andreas Borchert.
.\" ---------------------------------------------------------------------------
.\" $Id: InOut.3,v 1.3 1999/01/26 20:39:08 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: InOut.3,v $
.\" Revision 1.3  1999/01/26  20:39:08  borchert
.\" - some bad IR-constructions removed
.\" - some text to ReadString added
.\" - some text to DIAGNOSTICS added
.\"
.\" Revision 1.2  1997/02/25  17:39:59  borchert
.\" formatting changed and HISTORY added
.\"
.\" Revision 1.1  1996/12/04  18:19:17  martin
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
