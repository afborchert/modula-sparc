


User Commands                                              MMM(1)



NNAAMMEE
     mmm - make makefile for Modula-2

SSYYNNOOPPSSIISS
     mmmmmm  [--aaeellLLmmPPttTT]  [--vv(--|rr|ss)] [--(cc|CC|uu) makefile] [--pp proto]
     [file...]

DDEESSCCRRIIPPTTIIOONN
     _M_m_m is a general tool for extracting dependency  information
     from  Modula-2  and  Modula/R  source files.  On default _m_m_m
     generates output in a form acceptable by _m_a_k_e_(_1_) onto  stan­
     dard output.

     If  --cc  is given, a makefile is created which can be updated
     later using --uu.  Makefiles created  by  --cc  contain  several
     sections  delimited  by comments.  Every section which is to
     be updated by _m_m_m is preceded by a comment  with  a  keyword
     enclosed  in  braces.   Macro  definitions  generated by _m_m_m
     (except those defined in the _{_m_a_c_r_o_s_} section) may be  rede­
     fined without losing their value on updates.  If --ee is given
     environment variables supercede any macro value defaults  of
     _m_m_m  on makefile creation.  Flags given by makefile creation
     or updating are remembered by a special comment  inside  the
     makefile  and  work as defaults for further _m_m_m invocations.
     By default _m_m_m works on the source files given in  the  com­
     mand  line.   They  may be omitted on makefile updating if a
     SSRRCC macro definition is found.

     On makefile creation a prototype  is  taken  (except  --CC  is
     given  instead  of  --cc).  _M_m_m tries to take _$_H_O_M_E_/_._m_m_m___p_r_o_t_o
     first, then _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_m_o_d_u_l_a_/_m_m_m___p_r_o_t_o.  These defaults
     may  be overrided by giving another prototype file using the
     --pp option.  A typical prototype consists of the wanted  sec­
     tion  headings  and  some  additional rules like cleanup and
     source file printing.

     For each main module the transitive closure of  dependencies
     is  calculated  and  printed  in  the  list of modules to be
     linked to.  The main module names determine the output file­
     names of _l_d_(_1_).

     Following flags are available:

     --aa      This  flag  is  necessary  if symbol files are to be
             archived in _S_Y_M.  If you decide  to  archive  symbol
             files  you must create _S_Y_M first.  This is best done
             by _a_r _q _S_Y_M.

     --ll      Generate rules for maintaining non-main-objects in a
             library.   The  filename of the library may be given
             in the environment parameter _L_I_B (if --ee is given) or
             may be modified in the macro definition.



Release 3.0b6Last change: Last change: 24 February 1997          1






User Commands                                              MMM(1)



     --LL      Generate  dependencies even to not explicitely given
             modules.  For doing this the complete  MMOODDPPAATTHH  (see
             _m_2_c_(_1_))     and     the     library    (MMOODDLLIIBB    or
             _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_m_o_d_u_l_a) are considered.  On this flag
             _m_m_m warns about every module not found.

     --mm      implies --ll and causes _m_m_m to generate rules for sup­
             porting a library with profiled objects of  non-main
             modules.  See _m_2_c_(_1_) for more information about pro­
             filed libraries.

     --PP      Report about calling reference cycles (e.g. module _a
             imports _b and module _b imports _a).  The main problem
             of reference cycles is the undefined order  of  ini­
             tialization;  so  every  reference cycle member must
             not use anything of the other  members  during  ini­
             tialization.

     --tt      Print  given  source files in topsorted order.  Fol­
             lowing command causes correct order of compilation:
             m2c `mmm -t *.d *.m2`   or   mrc `mmm -t *.d* *.m[r2]`

     --TT      Print imports in a form suitable for _t_s_o_r_t_(_1_):
             _f_i_l_e_1 _f_i_l_e_2
             means _f_i_l_e_2  imports  from  _f_i_l_e_1.   Unlike  to  the
             dependency  section  in  makefiles  the  source file
             names are printed.  So --TT is very similar to --tt:
                                 m2c `mmm -t *.d *.m2`
             is equivalent to    m2c `mmm -T *.d *.m2 | tsort`
             and equivalent to   m2c `mmm -T *.d *.m2 | cut -d' ' -f1 | uniq`

     --vv      Support one of the version managers (ss for _S_C_C_S or rr
             for  _r_c_s).   The  use  of any version manager can be
             switched off by giving --.  Because  version  archive
             names  are  derived  from the original file names by
             adding some prefix or  suffix,  problems  may  occur
             with long file or module names.  _M_m_m warns if any of
             these problems could arise.

SSEEEE AALLSSOO
     _m_2_c_(_1_), _m_d_b_(_1_), _m_a_k_e_(_1_)

FFIILLEESS
     _/d_ue_sf_ra_/u_ll_ot_c_ap_lr_/o_lt_io_bt_/y_mp_oe_d_u_l_a_/_m_m_m___p_r_o_t_o
     _$o_Hw_On_M_Ep_/r_.o_mt_mo_mt__y_pp_re_o_tf_oile

BBUUGGSS
     Various difficulties  (e.g.  _m_2_c_(_1_)  does  not  find  symbol
     files) occur if the first 11 characters of a module name are
     not identical to the corresponding file name.





Release 3.0b6Last change: Last change: 24 February 1997          2






User Commands                                              MMM(1)



     On  --LL,  _m_m_m  generates  dependencies  to   symbolfiles   in
     libraries  only.   So,  implementation  module  updating  in
     libraries  don't  causes  _m_a_k_e_(_1_)  to  link  again.   That's
     because _m_m_m doesn't know about inter-library dependencies.

     _M_a_k_e(1)  has  several  bugs  and shortcomings (due to design
     errors) in context with archives and version  managers.   To
     get  around  them _m_m_m is forced in some cases to avoid rules
     and to generate transformations  explicitely.   Also,  some­
     times  the  order of files depending on is not lexicographic
     but topologic.












































Release 3.0b6Last change: Last change: 24 February 1997          3



